version: 0.2
phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/p2g3u3g4/
     # - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 633025986259.dkr.ecr.us-west-1.amazonaws.com
     # - echo Logging in to Amazon ECR....
     # - aws --version
     ##- $(aws ecr get-login --region ap-south-1 --no-include-email)
     # - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 358325425581.dkr.ecr.ap-south-1.amazonaws.com
     # -  Replace with this to your repository URI
     #- REPOSITORY_URI=358325425581.dkr.ecr.ap-south-1.amazonaws.com/spring-demo-ecr 
     #- IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - REPOSITORY_URI=public.ecr.aws/p2g3u3g4/newspring #change the uri
      - IMAGE_TAG=latest #build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - ls
      - echo "Building Maven project..."
     #- cd 
      - mvn clean install #-DskipTests=true
      - echo "building docker image...."
      #- cd ..
      - pwd
      - docker build -t newspring .
      - sudo docker tag thm:latest public.ecr.aws/p2g3u3g4/newspring:latest
   ###- aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/p2g3u3g4
      #- echo Build started on `date`
      #- echo building the Jar file
      #- mvn clean install
      #- echo Building the Docker image...
      #- docker build -t $REPOSITORY_URI:latest .
      #- docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      #- sudo docker push public.ecr.aws/p2g3u3g4/newspring:latest
      - echo Build completed on `date`
      - echo pushing to repo
      - docker push $REPOSITORY_URI:latest
     #- docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      # Give your container name
      - DOCKER_CONTAINER_NAME=thm
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
    - target/springboot-aws-deploy.jar




#==============================================================================================================
# version: 0.2
# phases:
#   pre_build:
#     commands:
#       - echo Logging in to Amazon ECR....
#       - aws --version
#       #- $(aws ecr get-login --region ap-south-1 --no-include-email)
#       - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 358325425581.dkr.ecr.ap-south-1.amazonaws.com
#       - # Replace with this to your repository URI
#       - REPOSITORY_URI=358325425581.dkr.ecr.ap-south-1.amazonaws.com/spring-demo-ecr
#       - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
#   build:
#     commands:
#       - echo Build started on `date`
#       - echo building the Jar file
#       - mvn clean install
#       - echo Building the Docker image...
#       - docker build -t $REPOSITORY_URI:latest .
#       - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
#   post_build:
#     commands:
#       - echo Build completed on `date`
#       - echo pushing to repo
#       - docker push $REPOSITORY_URI:latest
#       - docker push $REPOSITORY_URI:$IMAGE_TAG
#       - echo Writing image definitions file...
#       # Give your container name
#       - DOCKER_CONTAINER_NAME=spring-demo-ecr
#       - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#       - echo $DOCKER_CONTAINER_NAME
#       - echo printing imagedefinitions.json
#       - cat imagedefinitions.json
# artifacts:
#   files:
#     - imagedefinitions.json
#     - target/springboot-aws-deploy.jar
